// <auto-generated />
using System;
using JobSeeker.WebScraper.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace JobSeeker.WebScraper.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250612092600_AddedVacancyKeyIndex")]
    partial class AddedVacancyKeyIndex
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("JobSeeker.WebScraper.Domain.Entities.ScrapGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("Occupation")
                        .HasColumnType("integer");

                    b.Property<int>("OccupationGroup")
                        .HasColumnType("integer");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<int?>("SkillTag")
                        .HasColumnType("integer");

                    b.Property<int?>("Specialization")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Priority" }, "IX_ScrapTask_Priority");

                    b.HasIndex(new[] { "Occupation", "OccupationGroup", "Specialization", "SkillTag" }, "UX_ScrapTask_VacancyKey")
                        .IsUnique();

                    b.ToTable("ScrapGroups");
                });

            modelBuilder.Entity("JobSeeker.WebScraper.Domain.Entities.ScrapTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Entrypoint")
                        .IsRequired()
                        .HasColumnType("varchar(2048)");

                    b.Property<string>("ErrorDetails")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<int>("ScrapGroupId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ScrapGroupId");

                    b.HasIndex(new[] { "Priority" }, "IX_ScrapTask_Priority")
                        .HasDatabaseName("IX_ScrapTask_Priority1");

                    b.ToTable("ScrapTasks");
                });

            modelBuilder.Entity("JobSeeker.WebScraper.Domain.Entities.ScrapTaskResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("varchar(256)");

                    b.Property<int>("ScrapTaskId")
                        .HasColumnType("integer");

                    b.Property<bool>("Uploaded")
                        .HasColumnType("boolean")
                        .HasComment("Indicates whether the result of the scraping task has been uploaded to S3 or not");

                    b.HasKey("Id");

                    b.HasIndex("ScrapTaskId");

                    b.ToTable("ScrapTaskResults");
                });

            modelBuilder.Entity("JobSeeker.WebScraper.Domain.Entities.ScrapTask", b =>
                {
                    b.HasOne("JobSeeker.WebScraper.Domain.Entities.ScrapGroup", "ScrapGroup")
                        .WithMany("ScrapTasks")
                        .HasForeignKey("ScrapGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ScrapGroup");
                });

            modelBuilder.Entity("JobSeeker.WebScraper.Domain.Entities.ScrapTaskResult", b =>
                {
                    b.HasOne("JobSeeker.WebScraper.Domain.Entities.ScrapTask", "ScrapTask")
                        .WithMany("ScrapTaskResults")
                        .HasForeignKey("ScrapTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ScrapTask");
                });

            modelBuilder.Entity("JobSeeker.WebScraper.Domain.Entities.ScrapGroup", b =>
                {
                    b.Navigation("ScrapTasks");
                });

            modelBuilder.Entity("JobSeeker.WebScraper.Domain.Entities.ScrapTask", b =>
                {
                    b.Navigation("ScrapTaskResults");
                });
#pragma warning restore 612, 618
        }
    }
}
