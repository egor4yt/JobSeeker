@page "/vacancies/{professionKeyId:int}"
@using JobSeeker.WebUi.Application.Contracts.WebApi.Vacancies
@inject IHttpClientFactory HttpClientFactory;

<PageTitle>Vacancies list</PageTitle>

@if (_loading)
{
    <div>
        <p>Loading vacancies...</p>
    </div>
}
else if (string.IsNullOrWhiteSpace(_error) == false)
{
    <div>
        <p>@_error</p>
    </div>
}
else if (_vacancies.Count != 0)
{
    <div class="container">
        @foreach (var vacancyChunk in _vacancies.Chunk(2))
        {
            <div class="row mb-4">
                @foreach (var vacancy in vacancyChunk)
                {
                    <div class="col">
                        <div class="card">
                            <div class="card-header">
                                @vacancy.CompanyTitle
                            </div>
                            <div class="card-body">
                                <h5 class="card-title">@vacancy.Role</h5>
                                <p class="card-text">@vacancy.ShortDescription</p>
                                <a href="#" class="btn btn-primary">Read more</a>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
    </div>
}
else
{
    <div>
        <p>Vacancies not found</p>
    </div>
}



@code{
    [Parameter]
    public int ProfessionKeyId { get; set; }

    private IReadOnlyList<VacancyDto> _vacancies = [];
    private bool _loading = true;
    private string? _error;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender == false) return;

        await GetVacancies(0, 10);
    }

    private async Task GetVacancies(int skip, int take)
    {
        try
        {
            _loading = true;

            var httpClient = HttpClientFactory.CreateClient(ApiName.Base);
            var response = await httpClient.GetFromJsonAsync<SearchResponse>($"vacancies/search/{ProfessionKeyId}?skip={skip}&take={take}");
            if (response == null) return;

            _vacancies = response.Vacancies;
        }
        catch (Exception e)
        {
            _error = e.Message;
        }
        finally
        {
            _loading = false;
            StateHasChanged();
        }
    }

}