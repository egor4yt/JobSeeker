// <auto-generated />
using System;
using JobSeeker.WebApi.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace JobSeeker.WebApi.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250626164415_CompanySlugUnique")]
    partial class CompanySlugUnique
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("JobSeeker.WebApi.Domain.Entities.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Slug" }, "UX_Company_Slug")
                        .IsUnique();

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("JobSeeker.WebApi.Domain.Entities.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("JobSeeker.WebApi.Domain.Entities.Occupation", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<int>("OccupationGroupId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("OccupationGroupId");

                    b.ToTable("Occupations");
                });

            modelBuilder.Entity("JobSeeker.WebApi.Domain.Entities.OccupationGroup", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.HasKey("Id");

                    b.ToTable("OccupationGroups");
                });

            modelBuilder.Entity("JobSeeker.WebApi.Domain.Entities.ProfessionKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("OccupationGroupId")
                        .HasColumnType("integer");

                    b.Property<int?>("OccupationId")
                        .HasColumnType("integer");

                    b.Property<int?>("SkillTagId")
                        .HasColumnType("integer");

                    b.Property<int?>("SpecializationId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("OccupationGroupId");

                    b.HasIndex("OccupationId");

                    b.HasIndex("SkillTagId");

                    b.HasIndex("SpecializationId");

                    b.ToTable("ProfessionKeys");
                });

            modelBuilder.Entity("JobSeeker.WebApi.Domain.Entities.SkillTag", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<int>("SpecializationId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("SpecializationId");

                    b.ToTable("SkillTags");
                });

            modelBuilder.Entity("JobSeeker.WebApi.Domain.Entities.Source", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("TopLevelDomain")
                        .IsRequired()
                        .HasColumnType("varchar(32)");

                    b.Property<string>("UrlTemplate")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.HasKey("Id");

                    b.ToTable("OuterSources");
                });

            modelBuilder.Entity("JobSeeker.WebApi.Domain.Entities.Specialization", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<int>("OccupationId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("OccupationId");

                    b.ToTable("Specializations");
                });

            modelBuilder.Entity("JobSeeker.WebApi.Domain.Entities.Vacancy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ProfessionKeyId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(128)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ProfessionKeyId");

                    b.ToTable("Vacancies");
                });

            modelBuilder.Entity("JobSeeker.WebApi.Domain.Entities.VacancySource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("LocationId")
                        .HasColumnType("integer");

                    b.Property<int>("SourceId")
                        .HasColumnType("integer");

                    b.Property<string>("SourceKey")
                        .IsRequired()
                        .HasColumnType("varchar(256)");

                    b.Property<int>("VacancyId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SourceId");

                    b.ToTable("VacancySource");
                });

            modelBuilder.Entity("JobSeeker.WebApi.Domain.Entities.Occupation", b =>
                {
                    b.HasOne("JobSeeker.WebApi.Domain.Entities.OccupationGroup", "OccupationGroup")
                        .WithMany("Occupations")
                        .HasForeignKey("OccupationGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OccupationGroup");
                });

            modelBuilder.Entity("JobSeeker.WebApi.Domain.Entities.ProfessionKey", b =>
                {
                    b.HasOne("JobSeeker.WebApi.Domain.Entities.OccupationGroup", "OccupationGroup")
                        .WithMany("ProfessionKeys")
                        .HasForeignKey("OccupationGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobSeeker.WebApi.Domain.Entities.Occupation", "Occupation")
                        .WithMany("ProfessionKeys")
                        .HasForeignKey("OccupationId");

                    b.HasOne("JobSeeker.WebApi.Domain.Entities.SkillTag", "SkillTag")
                        .WithMany("ProfessionKeys")
                        .HasForeignKey("SkillTagId");

                    b.HasOne("JobSeeker.WebApi.Domain.Entities.Specialization", "Specialization")
                        .WithMany("ProfessionKeys")
                        .HasForeignKey("SpecializationId");

                    b.Navigation("Occupation");

                    b.Navigation("OccupationGroup");

                    b.Navigation("SkillTag");

                    b.Navigation("Specialization");
                });

            modelBuilder.Entity("JobSeeker.WebApi.Domain.Entities.SkillTag", b =>
                {
                    b.HasOne("JobSeeker.WebApi.Domain.Entities.Specialization", "Specialization")
                        .WithMany("SkillTags")
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Specialization");
                });

            modelBuilder.Entity("JobSeeker.WebApi.Domain.Entities.Specialization", b =>
                {
                    b.HasOne("JobSeeker.WebApi.Domain.Entities.Occupation", "Occupation")
                        .WithMany("Specializations")
                        .HasForeignKey("OccupationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Occupation");
                });

            modelBuilder.Entity("JobSeeker.WebApi.Domain.Entities.Vacancy", b =>
                {
                    b.HasOne("JobSeeker.WebApi.Domain.Entities.Company", "Company")
                        .WithMany("Vacancies")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobSeeker.WebApi.Domain.Entities.ProfessionKey", "ProfessionKey")
                        .WithMany("Vacancies")
                        .HasForeignKey("ProfessionKeyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("ProfessionKey");
                });

            modelBuilder.Entity("JobSeeker.WebApi.Domain.Entities.VacancySource", b =>
                {
                    b.HasOne("JobSeeker.WebApi.Domain.Entities.Location", "Location")
                        .WithMany("VacancySources")
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobSeeker.WebApi.Domain.Entities.Source", "Source")
                        .WithMany("VacancySources")
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobSeeker.WebApi.Domain.Entities.Vacancy", "Vacancy")
                        .WithMany("VacancySources")
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("Source");

                    b.Navigation("Vacancy");
                });

            modelBuilder.Entity("JobSeeker.WebApi.Domain.Entities.Company", b =>
                {
                    b.Navigation("Vacancies");
                });

            modelBuilder.Entity("JobSeeker.WebApi.Domain.Entities.Location", b =>
                {
                    b.Navigation("VacancySources");
                });

            modelBuilder.Entity("JobSeeker.WebApi.Domain.Entities.Occupation", b =>
                {
                    b.Navigation("ProfessionKeys");

                    b.Navigation("Specializations");
                });

            modelBuilder.Entity("JobSeeker.WebApi.Domain.Entities.OccupationGroup", b =>
                {
                    b.Navigation("Occupations");

                    b.Navigation("ProfessionKeys");
                });

            modelBuilder.Entity("JobSeeker.WebApi.Domain.Entities.ProfessionKey", b =>
                {
                    b.Navigation("Vacancies");
                });

            modelBuilder.Entity("JobSeeker.WebApi.Domain.Entities.SkillTag", b =>
                {
                    b.Navigation("ProfessionKeys");
                });

            modelBuilder.Entity("JobSeeker.WebApi.Domain.Entities.Source", b =>
                {
                    b.Navigation("VacancySources");
                });

            modelBuilder.Entity("JobSeeker.WebApi.Domain.Entities.Specialization", b =>
                {
                    b.Navigation("ProfessionKeys");

                    b.Navigation("SkillTags");
                });

            modelBuilder.Entity("JobSeeker.WebApi.Domain.Entities.Vacancy", b =>
                {
                    b.Navigation("VacancySources");
                });
#pragma warning restore 612, 618
        }
    }
}
